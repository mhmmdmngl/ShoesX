@model WholesaleShoeStore.Controllers.CheckoutViewModel
@{
    ViewData["Title"] = "Checkout - Complete Your Order";
}

<style>
    .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 0;
    }

    .checkout-header {
        text-align: center;
        margin-bottom: 3rem;
    }

        .checkout-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .checkout-header p {
            color: #6b7280;
            font-size: 1.1rem;
        }

    .checkout-progress {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .progress-step {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }

        .progress-step.active {
            color: #2563eb;
            font-weight: 600;
        }

        .progress-step .step-number {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #d1d5db;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
        }

        .progress-step.active .step-number {
            background: #2563eb;
        }

    .checkout-content {
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 3rem;
    }

    .checkout-form {
        background: #ffffff;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        border: 1px solid #e5e7eb;
    }

    .form-section {
        margin-bottom: 2.5rem;
    }

        .form-section:last-child {
            margin-bottom: 0;
        }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid #d1d5db;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

    .form-label {
        display: block;
        font-weight: 500;
        color: #1f2937;
        margin-bottom: 0.5rem;
    }

    .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s ease;
        box-sizing: border-box;
    }

        .form-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

    .form-textarea {
        min-height: 100px;
        resize: vertical;
        font-family: inherit;
    }

    .payment-methods {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    .payment-method {
        position: relative;
        cursor: pointer;
    }

        .payment-method input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

    .payment-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1.5rem;
        border: 2px solid #d1d5db;
        border-radius: 12px;
        background: #ffffff;
        transition: all 0.2s ease;
        text-align: center;
        cursor: pointer;
    }

    .payment-method input:checked + .payment-card {
        border-color: #2563eb;
        background: rgba(37, 99, 235, 0.05);
    }

    .payment-card .icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        color: #6b7280;
    }

    .payment-method input:checked + .payment-card .icon {
        color: #2563eb;
    }

    .order-summary {
        background: #ffffff;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        border: 1px solid #e5e7eb;
        position: sticky;
        top: 2rem;
        height: fit-content;
    }

    .summary-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .cart-items {
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item:first-child {
            padding-top: 0;
        }

    .item-image {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        background: #f9fafb;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        border: 1px solid #e5e7eb;
    }

    .item-details {
        flex: 1;
        min-width: 0;
    }

    .item-name {
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 0.25rem;
        font-size: 0.95rem;
    }

    .item-info {
        font-size: 0.875rem;
        color: #6b7280;
        line-height: 1.4;
    }

    .item-price {
        font-weight: 600;
        color: #1f2937;
        font-size: 1rem;
        text-align: right;
    }

    .summary-line {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

        .summary-line:last-child {
            border-bottom: none;
        }

        .summary-line.total {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1f2937;
            border-top: 2px solid #d1d5db;
            margin-top: 1rem;
            padding-top: 1rem;
            border-bottom: none;
        }

    .checkout-actions {
        margin-top: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .btn-checkout {
        width: 100%;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1.125rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

        .btn-checkout:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
        }

        .btn-checkout:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

    .btn-back {
        width: 100%;
        padding: 0.75rem 1.5rem;
        background: #f3f4f6;
        color: #6b7280;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

        .btn-back:hover {
            background: #6b7280;
            color: white;
            text-decoration: none;
        }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert-danger {
        background: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.2);
        color: #dc2626;
    }

    .alert-success {
        background: rgba(16, 185, 129, 0.1);
        border: 1px solid rgba(16, 185, 129, 0.2);
        color: #059669;
    }

    .cart-empty {
        text-align: center;
        padding: 3rem 1rem;
        color: #6b7280;
    }

        .cart-empty i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #d1d5db;
        }

        .cart-empty h4 {
            margin-bottom: 0.5rem;
            color: #374151;
        }

    .loading-spinner {
        text-align: center;
        padding: 2rem;
        color: #6b7280;
    }

        .loading-spinner i {
            font-size: 2rem;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

    @@keyframes spin {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }

    @@media (max-width: 968px) {
        .checkout-content

    {
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .order-summary {
        position: static;
        order: -1;
    }

    .form-grid {
        grid-template-columns: 1fr;
    }

    .checkout-container {
        padding: 1rem;
    }

    }
</style>

<div class="checkout-container">
    <!-- Header -->
    <div class="checkout-header">
        <h1><i class="fas fa-shopping-cart"></i> Checkout</h1>
        <p>Complete your order safely and securely</p>
    </div>

    <!-- Progress Indicator -->
    <div class="checkout-progress">
        <div class="progress-step">
            <div class="step-number">1</div>
            <span>Cart</span>
        </div>
        <i class="fas fa-arrow-right"></i>
        <div class="progress-step active">
            <div class="step-number">2</div>
            <span>Checkout</span>
        </div>
        <i class="fas fa-arrow-right"></i>
        <div class="progress-step">
            <div class="step-number">3</div>
            <span>Confirmation</span>
        </div>
    </div>

    <!-- Error/Success Messages -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i>
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="checkout-content">
        <!-- Checkout Form -->
        <div class="checkout-form">
            <form asp-action="ProcessCheckout" method="post" id="checkoutForm">
                @Html.AntiForgeryToken()

                <!-- Billing Information -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-building"></i>
                        Billing Information
                    </h3>

                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" asp-for="BillingInfo.CompanyName">Company Name *</label>
                            <input class="form-input" asp-for="BillingInfo.CompanyName" placeholder="Your Company Name" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="BillingInfo.ContactName">Contact Name *</label>
                            <input class="form-input" asp-for="BillingInfo.ContactName" placeholder="Contact Person" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="BillingInfo.Email">Email *</label>
                            <input class="form-input" asp-for="BillingInfo.Email" type="email" placeholder="contact@company.com" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="BillingInfo.Phone">Phone *</label>
                            <input class="form-input" asp-for="BillingInfo.Phone" type="tel" placeholder="+90 555 123 4567" required>
                        </div>

                        <div class="form-group full-width">
                            <label class="form-label" asp-for="BillingInfo.TaxId">Tax ID</label>
                            <input class="form-input" asp-for="BillingInfo.TaxId" placeholder="Tax Identification Number">
                        </div>
                    </div>
                </div>

                <!-- Shipping Information -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-truck"></i>
                        Shipping Information
                    </h3>

                    <div class="form-grid">
                        <div class="form-group full-width">
                            <label class="form-label" asp-for="ShippingInfo.Address">Address *</label>
                            <input class="form-input" asp-for="ShippingInfo.Address" placeholder="Full shipping address" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="ShippingInfo.City">City *</label>
                            <input class="form-input" asp-for="ShippingInfo.City" placeholder="City" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="ShippingInfo.Country">Country *</label>
                            <input class="form-input" asp-for="ShippingInfo.Country" placeholder="Country" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="ShippingInfo.PostalCode">Postal Code</label>
                            <input class="form-input" asp-for="ShippingInfo.PostalCode" placeholder="Postal Code">
                        </div>

                        <div class="form-group">
                            <label class="form-label" asp-for="ShippingInfo.Phone">Phone</label>
                            <input class="form-input" asp-for="ShippingInfo.Phone" type="tel" placeholder="Phone for delivery">
                        </div>
                    </div>
                </div>

                <!-- Payment Method -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-credit-card"></i>
                        Payment Method
                    </h3>

                    <div class="payment-methods">
                        <label class="payment-method">
                            <input type="radio" name="PaymentMethod" value="Cash" checked>
                            <div class="payment-card">
                                <i class="fas fa-money-bill icon"></i>
                                <span>Cash</span>
                            </div>
                        </label>

                        <label class="payment-method">
                            <input type="radio" name="PaymentMethod" value="Bank Transfer">
                            <div class="payment-card">
                                <i class="fas fa-university icon"></i>
                                <span>Bank Transfer</span>
                            </div>
                        </label>

                        <label class="payment-method">
                            <input type="radio" name="PaymentMethod" value="Credit Card">
                            <div class="payment-card">
                                <i class="fas fa-credit-card icon"></i>
                                <span>Credit Card</span>
                            </div>
                        </label>
                    </div>
                </div>

                <!-- Notes -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-sticky-note"></i>
                        Order Notes
                    </h3>

                    <div class="form-group">
                        <label class="form-label" asp-for="Notes">Special Instructions</label>
                        <textarea class="form-input form-textarea" asp-for="Notes" placeholder="Any special delivery instructions or notes..."></textarea>
                    </div>
                </div>

                <div class="checkout-actions">
                    <button type="submit" class="btn-checkout" id="placeOrderBtn">
                        <i class="fas fa-lock"></i>
                        Place Order
                    </button>
                </div>
            </form>
        </div>

        <!-- Order Summary -->
        <div class="order-summary">
            <h3 class="summary-title">Order Summary</h3>

            <div class="cart-items" id="checkoutCartItems">
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading cart items...</p>
                </div>
            </div>

            <div id="checkoutSummary">
                <div class="summary-line">
                    <span>Subtotal:</span>
                    <span id="cartSubtotal">€0.00</span>
                </div>
                <div class="summary-line">
                    <span>Shipping:</span>
                    <span id="cartShipping">€0.00</span>
                </div>
                <div class="summary-line">
                    <span>Tax (18%):</span>
                    <span id="cartTax">€0.00</span>
                </div>
                <div class="summary-line total">
                    <span>Total:</span>
                    <span id="cartTotal">€0.00</span>
                </div>
            </div>

            <a href="@Url.Action("Index")" class="btn-back" style="margin-top: 1rem;">
                <i class="fas fa-arrow-left"></i>
                Back to Shopping
            </a>
        </div>
    </div>
</div>

<script>
    // ===== DÜZELTİLMİŞ CHECKOUT CART MANAGER =====
    // Checkout sayfası için sepet görüntüleme

    document.addEventListener('DOMContentLoaded', function() {
        console.log('🛒 Checkout Cart Manager başlatılıyor...');

        const CheckoutCartManager = {
            cartItems: [],
            isLoading: false,

            // Ana başlatma fonksiyonu
            async init() {
                console.log('📋 Checkout cart initialize ediliyor...');

                try {
                    this.showLoadingState();

                    // Önce backend'den yüklemeye çalış
                    const backendSuccess = await this.loadFromBackend();

                    if (!backendSuccess) {
                        // Backend başarısızsa localStorage'dan yükle
                        this.loadFromLocalStorage();
                    }

                    this.displayCart();
                    this.validateCartForCheckout();

                } catch (error) {
                    console.error('❌ Checkout cart init hatası:', error);
                    this.showErrorState();
                } finally {
                    this.hideLoadingState();
                }
            },

            // Backend'den sepet verilerini yükle
            async loadFromBackend() {
                try {
                    console.log('🔄 Backend\'den sepet yükleniyor...');

                    const response = await fetch('/Customer/GetCartForCheckout', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success && result.data && result.data.items && result.data.items.length > 0) {
                        this.cartItems = this.convertBackendCartItems(result.data.items);
                        console.log('✅ Backend\'den sepet yüklendi:', this.cartItems.length, 'ürün');
                        return true;
                    } else {
                        console.log('⚠️ Backend\'de sepet boş veya bulunamadı');
                        return false;
                    }
                } catch (error) {
                    console.error('❌ Backend sepet yükleme hatası:', error);
                    return false;
                }
            },

            // Backend sepet verilerini frontend formatına çevir
            convertBackendCartItems(backendItems) {
                return backendItems.map(item => {
                    // ✅ TotalPieces düzgün hesaplanıyor
                    const totalPieces = item.totalPieces || 1;
                    const quantity = item.quantity || 1;
                    const unitPrice = item.unitPrice || item.finalPrice || 0;

                    return {
                        id: item.id || Date.now() + Math.random(),
                        cartId: item.id,
                        productCode: item.productCode || '',
                        color: item.color || '',
                        size: item.size || 42,
                        quantity: quantity,

                        // ✅ Fiyat hesaplamaları düzeltildi
                        unitPrice: unitPrice,
                        pricePerBox: unitPrice,
                        totalPrice: item.totalPrice || (quantity * unitPrice),

                        // ✅ Parça hesaplamaları düzeltildi
                        totalPieces: totalPieces,
                        piecesPerBox: totalPieces,
                        totalPiecesOrdered: quantity * totalPieces,

                        // Ürün bilgileri
                        isAssorted: Boolean(item.isAssorted),
                        boxQuantity: item.boxQuantity || 0,
                        outerMaterial: item.outerMaterial || 'N/A',
                        innerMaterial: item.innerMaterial || 'N/A',
                        sole: item.sole || 'N/A',
                        productGroup: item.productGroup || 'N/A',
                        gender: item.gender || 'UNISEX',
                        unit: 'KUTU',
                        addedAt: item.createdAt || new Date().toISOString()
                    };
                });
            },

            // localStorage'dan sepet yükle
            loadFromLocalStorage() {
                try {
                    console.log('💾 localStorage\'dan sepet yükleniyor...');

                    const savedCart = localStorage.getItem('wholesaleCart');
                    if (savedCart) {
                        const parsedCart = JSON.parse(savedCart);
                        if (Array.isArray(parsedCart) && parsedCart.length > 0) {
                            this.cartItems = parsedCart;
                            console.log('✅ localStorage\'dan sepet yüklendi:', this.cartItems.length, 'ürün');
                            return true;
                        }
                    }

                    console.log('⚠️ localStorage\'da sepet bulunamadı');
                    this.cartItems = [];
                    return false;
                } catch (error) {
                    console.error('❌ localStorage sepet yükleme hatası:', error);
                    this.cartItems = [];
                    return false;
                }
            },

            // Sepeti görüntüle
            displayCart() {
                console.log('🎨 Sepet görüntüleniyor:', this.cartItems.length, 'ürün');

                const cartContainer = document.getElementById('checkoutCartItems');
                const summaryContainer = document.getElementById('checkoutSummary');

                if (!cartContainer) {
                    console.error('❌ Cart container bulunamadı!');
                    return;
                }

                if (this.cartItems.length === 0) {
                    this.showEmptyCart(cartContainer);
                    this.updateSummary(0, 0, 0, 0);
                    return;
                }

                // Sepet ürünlerini listele
                cartContainer.innerHTML = this.cartItems.map(item => this.createCartItemHTML(item)).join('');

                // Özet hesapları güncelle
                this.updateSummaryCalculations();
            },

            // ✅ Sepet ürünü HTML'i - düzeltilmiş
            createCartItemHTML(item) {
                const assortedInfo = item.isAssorted ?
                    `<div class="assorted-info">
                        <span class="assorted-badge">🏷️ Asorti Ürün</span>
                        <small>${item.piecesPerBox} parça karışık numara</small>
                    </div>` : '';

                const pricingInfo = item.isAssorted ?
                    `<div class="pricing-breakdown">
                        <div>📦 ${item.quantity} kutu × ${item.piecesPerBox} parça</div>
                        <div>💰 Parça başı: ₺${(item.unitPrice / item.piecesPerBox).toFixed(2)}</div>
                        <div>💰 Kutu başı: ₺${item.pricePerBox.toFixed(2)}</div>
                    </div>` :
                    `<div class="pricing-breakdown">
                        <div>📦 ${item.quantity} kutu × ₺${item.pricePerBox.toFixed(2)}</div>
                    </div>`;

                return `
                    <div class="cart-item" data-item-id="${item.id}">
                        <div class="item-image">
                            <div class="product-icon">👟</div>
                        </div>
                        <div class="item-details">
                            <div class="item-header">
                                <h4 class="item-name">${item.productCode} - ${item.color}</h4>
                                ${assortedInfo}
                            </div>
                            <div class="item-specs">
                                <span class="spec-tag">${item.outerMaterial}</span>
                                <span class="spec-tag">${item.productGroup}</span>
                                <span class="spec-tag">${item.gender}</span>
                                <span class="spec-tag">Size: ${item.size}</span>
                            </div>
                            ${pricingInfo}
                            <div class="quantity-info">
                                <strong>Toplam: ${item.totalPiecesOrdered} parça</strong>
                            </div>
                        </div>
                        <div class="item-price">
                            <div class="price-main">₺${item.totalPrice.toFixed(2)}</div>
                            <div class="price-unit">toplam</div>
                        </div>
                    </div>
                `;
            },

            // Boş sepet görünümü
            showEmptyCart(container) {
                container.innerHTML = `
                    <div class="cart-empty">
                        <div class="empty-icon">🛒</div>
                        <h3>Sepetiniz Boş</h3>
                        <p>Ödeme yapabilmek için sepetinize ürün eklemeniz gerekiyor.</p>
                        <a href="/Customer/Index" class="btn-continue-shopping">
                            <i class="fas fa-arrow-left"></i>
                            Alışverişe Devam Et
                        </a>
                    </div>
                `;
            },

            // ✅ Özet hesaplamaları - düzeltilmiş
            updateSummaryCalculations() {
                if (this.cartItems.length === 0) {
                    this.updateSummary(0, 0, 0, 0);
                    return;
                }

                // ✅ Doğru hesaplamalar
                const subtotal = this.cartItems.reduce((sum, item) => sum + item.totalPrice, 0);
                const shipping = this.calculateShipping(subtotal);
                const tax = this.calculateTax(subtotal);
                const total = subtotal + shipping + tax;

                this.updateSummary(subtotal, shipping, tax, total);

                // Debug bilgisi
                console.log('💰 Sepet hesaplamaları:', {
                    items: this.cartItems.length,
                    subtotal: subtotal.toFixed(2),
                    shipping: shipping.toFixed(2),
                    tax: tax.toFixed(2),
                    total: total.toFixed(2)
                });
            },

            // Özet display'ini güncelle
            updateSummary(subtotal, shipping, tax, total) {
                const elements = {
                    subtotal: document.getElementById('cartSubtotal'),
                    shipping: document.getElementById('cartShipping'),
                    tax: document.getElementById('cartTax'),
                    total: document.getElementById('cartTotal')
                };

                if (elements.subtotal) elements.subtotal.textContent = `₺${subtotal.toFixed(2)}`;
                if (elements.shipping) elements.shipping.textContent = `₺${shipping.toFixed(2)}`;
                if (elements.tax) elements.tax.textContent = `₺${tax.toFixed(2)}`;
                if (elements.total) elements.total.textContent = `₺${total.toFixed(2)}`;

                // Debug için console'da da göster
                console.log('🧾 Fatura Özeti:', {
                    'Ara Toplam': `₺${subtotal.toFixed(2)}`,
                    'Kargo': `₺${shipping.toFixed(2)}`,
                    'KDV (%18)': `₺${tax.toFixed(2)}`,
                    'Genel Toplam': `₺${total.toFixed(2)}`
                });
            },

            // Kargo hesaplama
            calculateShipping(subtotal) {
                if (subtotal >= 500) return 0; // 500₺ üzeri ücretsiz kargo
                if (subtotal >= 200) return 25; // 200-500₺ arası düşük kargo
                return 50; // Standart kargo
            },

            // KDV hesaplama (%18)
            calculateTax(subtotal) {
                return subtotal * 0.18;
            },

            // Checkout için sepet validasyonu
            validateCartForCheckout() {
                const checkoutBtn = document.getElementById('placeOrderBtn');

                if (!checkoutBtn) return;

                if (this.cartItems.length === 0) {
                    checkoutBtn.disabled = true;
                    checkoutBtn.innerHTML = '<i class="fas fa-shopping-cart"></i> Sepet Boş';
                    checkoutBtn.classList.add('disabled');
                } else {
                    checkoutBtn.disabled = false;
                    checkoutBtn.innerHTML = '<i class="fas fa-lock"></i> Siparişi Tamamla';
                    checkoutBtn.classList.remove('disabled');
                }
            },

            // Loading durumları
            showLoadingState() {
                const container = document.getElementById('checkoutCartItems');
                if (container) {
                    container.innerHTML = `
                        <div class="loading-state">
                            <div class="loading-spinner"></div>
                            <p>Sepet yükleniyor...</p>
                        </div>
                    `;
                }
            },

            hideLoadingState() {
                // displayCart tarafından handle ediliyor
            },

            showErrorState() {
                const container = document.getElementById('checkoutCartItems');
                if (container) {
                    container.innerHTML = `
                        <div class="error-state">
                            <div class="error-icon">⚠️</div>
                            <h3>Sepet Yükleme Hatası</h3>
                            <p>Sepetiniz yüklenirken bir hata oluştu.</p>
                            <button onclick="window.location.reload()" class="btn-retry">
                                <i class="fas fa-refresh"></i>
                                Tekrar Dene
                            </button>
                        </div>
                    `;
                }
            },

            // Toast mesajları
            showToast(message, type = 'info') {
                console.log(`${type.toUpperCase()}: ${message}`);

                // Basit toast implementasyonu
                const toast = document.createElement('div');
                toast.className = `checkout-toast toast-${type}`;
                toast.style.cssText = `
                    position: fixed;
                    top: 2rem;
                    right: 2rem;
                    background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
                    color: white;
                    padding: 1rem 1.5rem;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    z-index: 9999;
                    animation: slideInRight 0.3s ease;
                `;

                toast.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i>
                        <span>${message}</span>
                    </div>
                `;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        };

        // CSS animasyonları ekle
        const style = document.createElement('style');
        style.textContent = `
    @@keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }

    @@keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }

            .cart-item {
                display: flex;
                align-items: center;
                gap: 1rem;
                padding: 1.5rem 0;
                border-bottom: 1px solid #e5e7eb;
                transition: background-color 0.2s ease;
            }

            .cart-item:hover {
                background-color: #f9fafb;
                border-radius: 8px;
                margin: 0 -1rem;
                padding: 1.5rem 1rem;
            }

            .item-image {
                width: 80px;
                height: 80px;
                background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
            }

            .product-icon {
                font-size: 2rem;
                opacity: 0.7;
            }

            .item-details {
                flex: 1;
                min-width: 0;
            }

            .item-header {
                margin-bottom: 0.75rem;
            }

            .item-name {
                font-size: 1.1rem;
                font-weight: 600;
                color: #1f2937;
                margin: 0 0 0.5rem 0;
            }

            .assorted-info {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                margin-bottom: 0.5rem;
            }

            .assorted-badge {
                background: #fbbf24;
                color: #92400e;
                padding: 0.25rem 0.5rem;
                border-radius: 4px;
                font-size: 0.75rem;
                font-weight: 600;
            }

            .item-specs {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                margin-bottom: 0.75rem;
            }

            .spec-tag {
                background: #f3f4f6;
                color: #6b7280;
                padding: 0.25rem 0.5rem;
                border-radius: 4px;
                font-size: 0.75rem;
                font-weight: 500;
            }

            .pricing-breakdown {
                background: #f8fafc;
                padding: 0.75rem;
                border-radius: 6px;
                margin-bottom: 0.5rem;
                font-size: 0.875rem;
                color: #374151;
            }

            .pricing-breakdown div {
                margin-bottom: 0.25rem;
            }

            .pricing-breakdown div:last-child {
                margin-bottom: 0;
            }

            .quantity-info {
                color: #1f2937;
                font-size: 0.9rem;
            }

            .item-price {
                text-align: right;
                flex-shrink: 0;
            }

            .price-main {
                font-size: 1.25rem;
                font-weight: 700;
                color: #1f2937;
            }

            .price-unit {
                font-size: 0.75rem;
                color: #6b7280;
                margin-top: 0.25rem;
            }

            .cart-empty {
                text-align: center;
                padding: 4rem 2rem;
                color: #6b7280;
            }

            .empty-icon {
                font-size: 4rem;
                margin-bottom: 1rem;
                opacity: 0.5;
            }

            .cart-empty h3 {
                font-size: 1.5rem;
                font-weight: 600;
                color: #374151;
                margin-bottom: 0.5rem;
            }

            .btn-continue-shopping {
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
                background: #3b82f6;
                color: white;
                padding: 0.75rem 1.5rem;
                border-radius: 8px;
                text-decoration: none;
                font-weight: 500;
                margin-top: 1rem;
                transition: background-color 0.2s ease;
            }

            .btn-continue-shopping:hover {
                background: #2563eb;
                text-decoration: none;
                color: white;
            }

            .loading-state, .error-state {
                text-align: center;
                padding: 3rem 1rem;
                color: #6b7280;
            }

            .loading-spinner {
                width: 40px;
                height: 40px;
                border: 3px solid #f3f4f6;
                border-top: 3px solid #3b82f6;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 0 auto 1rem auto;
            }

            .error-icon {
                font-size: 3rem;
                margin-bottom: 1rem;
            }

            .btn-retry {
                background: #ef4444;
                color: white;
                border: none;
                padding: 0.75rem 1.5rem;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 500;
                margin-top: 1rem;
                transition: background-color 0.2s ease;
            }

            .btn-retry:hover {
                background: #dc2626;
            }

    @@keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            .disabled {
                opacity: 0.6;
                cursor: not-allowed !important;
            }

            .disabled:hover {
                transform: none !important;
            }
        `;
        document.head.appendChild(style);

        // Checkout cart manager'ı başlat
        CheckoutCartManager.init();

        // Global erişim için
        window.CheckoutCartManager = CheckoutCartManager;

        console.log('✅ Checkout Cart Manager hazır!');
    });
    // Add CSS animation
    const style = document.createElement('style');
    style.textContent = `
    @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);
</script>